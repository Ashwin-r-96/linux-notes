Shell scripting:
No need to compile it.
The script is interpreted by the OS
#######################################BASH SHELL SCRIPTING################################################################
cat /etc/shells--> to list available shells in terminal
BASH--> Bourne again shell (improved version of shell)
which bash--> to know where it is located
##############################################################################################################################
######################################################## Shell Scripting ##########################################################
#!--> shebang
echo $SHELL----> gives /bin/bash
[ash@mcdappsync01 ~]$ cat first.sh
#! /bin/bash
echo $SHELL
echo `hostname`
echo `hostname -I`
while :
do
        echo "hello"
        sleep 1
done

##############################################################################################################################
1. Shell interprets the commands we entered and interact with kernel on behalf of us.
2. user--> shell, application--> system call--> kernel--> hardware
3. shell interacts with the kernel using the system call
4. Kernel is the heart of OS

##################################################### SHELL & ENVIRONMENT VARIABLES ###########################################
vi second.sh
echo $newvar
env newvar="ashwin"--> setting new environment variable, double quotes doesn't matter.
export env newvar="ashwin"--> exporting so that other shell can access it
sh second.sh--> displays ashwin as output
env -u newvar--> remove the newvar from env
sh second.sh--> still displays the output "ashwin", becoz the newvar got exported
unset newvar--> unset the exported data
sh second.sh--> now cant return any output
we can set existing variables also. export PATH=$PATH:/ash--> here we are joining the /ash to the $PATH

##############################################################################################################################
primapad.com
Elliptic Curve Digital Signature Algorithm(ECDSA)

/proc--> kernel data structure mounted as file system here.
/sys--> same as /proc but modern one
cat /home/ash/.bash_history -->holds the history of commands we executed.
!h --> command to display history of commands
we can delete the history of commands by clearing the /home/ash/.bash_history file
HISTSIZE=1000
HISTCONTROL= ignoredups:ignorespace:erasedups
HISTTIMEFORMAT

ps -aux
  956  ps ef
  957  ps -ef
  958  top -b -n 2
  959  man top
  960  ps -eLf
  961  ps -eLf | more
  962  ls -l high > file.txt
  963  ls -l high 2> file.txt
  964  cat file.txt
  965  rm -f file.txt
  966  ls -l hight > file.txt 2>&1
  967  cat file.txt
  968  cat 1< file.txt
  969  cat < file.txt
  970  cat 0< file.txt
  971  ls -l
  972  echo $?
  973  ls -l jksdf
  974  echo $?
########################### FILE DESCRIPTORS ########################################
exec 3<> hell
 1037  ls -l 3> hell
 1038  cat hell
 1039  ls -l  >&3
 1040  cat hell
 1041  exec 3>&-
 1042  echo "hi" >&3 --> whenever we write something on to the >&3 it will be appended one by one
 1043  exec 4<> heaven
 1044  echo "heaven"
 1045  echo "heaven" >&4
 1046  cat heaven
 1047  exec 4>&-
 1048  cat "hell to heaven" >&4
 1049  history |tail

:set nu, :set nonu
:set ic, :set noic
:sp
:e filename, :f
ctrl+^ to switch between opened files
/wordtobesearched
?wordtobesearched

echo "hello" | tee > filename --> redirect the hello to a file
?,*,[],{},[!9]
\ --> escape character--> with it we can create a file with wildcard character as name
find . -name file*
find . -maxdepth 2 -iname file* --> iname is used to get files with case insensitive
find . -maxdepth 2 -not -iname file*
find /home/ash/foldername -iname file*
find . -iname "*.cpp* -o -iname "*.xml" [or] -a
find . -iname "abc*" ! -iname "*.txt"--> display filename without txt extension
find . -type f -name ".*" --> display hidden files
find / /home/ash -type f -name abc
find . -type f ! -perm 777
find / -perm /u=s
find / -perm /u=r
find / -perm /a=x
find /home -user ash --> find all the files of user

find . -type f -empty -exec rm {} \;
find . -type f -exec ls -l {} \;
mkdir
find . -type f | xargs ls -l
find . -type f -exec cat {} \;
find . -type f -size +10M -size -20M
find . -type f | xargs ls -l
find . -type f | xargs cat

GLOBAL REGULAR EXPRESSION:
grep option wordtobesearched searchedfromfile
options:
-i --> case insensitive
-v --> other than specified search
-r --> recursively search
-c --> count the matched pattern
-E --> extended grep
-w --> exact word
-F --> fixed grep
-R --> reverse grep

##################### SCRIPTING #######################################################
#!/bin/bash
set -x
get_ashfunc()
{
echo "we are inside function"
}
scriptname=$0
argument1=$1
argument2=$2
echo "script name is ${scriptname}by ash "
echo "first argument is $argument1"
echo "second argument is $argument2"
get_ashfunc
num=2

if [ $num -eq 2 ]
then
echo "match"
fi
set +x
exit 0

set -x ----> is the debug mode 
set -n --> is the rough run mode--> then run the script to check for error

set -x
count=1
echo "$count"
count=$((count + 1))
echo "$count"

While loop:
#!/bin/bash
#set -x
count=1
echo "$count"
count=$((count + 1))
echo "$count"
#while [1] while true while :--> all are same
while [ 1 ]
do
        pwd
        sleep 1
done

while :;do pwd;sleep 1;done
while : or while true or while [1]--> all denotes thes condition while true
###############################################################################

mc57167 ALL=(ALL)  NOPASSWD: /usr/bin/su - caniwprd, /usr/bin/su - canisprd
#######################################################################################
#! /bin/bash

for i in 1 2 3 4 5 6 a b c d
do
echo $i
done


[root@mcdappsync01 ~]# cat for2.sh
#! /bin/bash
for i in {1..10..2}
do
echo $i
done


[root@mcdappsync01 ~]# cat for3.sh
#! /bin/bash
for i in $(seq 1 2 10)
do
echo "hi $i"
done


[root@mcdappsync01 ~]# cat for4.sh
#! /bin/bash
for (( i=1;i<=5;i++ ))
do
echo "welcome $i"
done


[root@mcdappsync01 ~]# cat for5.sh
#! /bin/bash
for (( ; ; ))
do
echo "infinite loop"
done


[root@mcdappsync01 ~]# cat for6.sh
#! /bin/bash
for i in `seq 1 2 10`
do
echo "hi $i"
done

[root@mcdappsync01 ~]# cat if1.sh
#! /bin/bash
#set -x

if [ $1 -eq 1 ] ----> $1 is send as argument here
then
echo "match found"
else
echo "match not found"
fi


[root@mcdappsync01 ~]# cat if2.sh
#! /bin/bash
set -x

fruit="apple"
vegetable="carrot"
if [ $fruit = apple ] && [ $vegetable == "carrot" ]
then
echo "true"
else
echo "false"
fi



[root@mcdappsync01 ~]# cat read1.sh
#! /bin/bash

echo "enter a number"
read num1
echo "enter a string"
read word
echo "enter 2 characters only"
read -n 2 word2
printf "\n the entered number is $num1\n"
echo "the incremented number is $((num1+1))"
if [ $word = hello ]
then
echo "entered-$word matches"
else
echo "no match found"
fi
echo "2 character word is $word2"
############################################################# READ COMMAND IN SHELL ####################################################################33
[root@mcdappsync01 ~]# cat read2.sh
#! /bin/bash

echo "enter series of digits"
read -a array1
for i in ${array1[@]}
do
echo "$i"
done
echo "enter strings"
read -a array2
for i in ${array2[@]}
do
echo "$i"
done
 ################################################################## CASE STATEMENT #####################################################################
[root@mcdappsync01 ~]# cat case1.sh
#! /bin/bash

echo "enter a number"
read number
case $number in
        1) echo "number is 1" ;;
        2) echo "number is 2" ;;
        "end") echo "end of case program" ;;
        *) echo "default is 3" ;;
esac

######################################################################## EXIT FILE ########################################################################
[root@mcdappsync01 ~]# cat exit1.sh
#! /bin/bash
#ls -l filename
#if [ $? -eq 0 ]
#then
#       exit 0
#fi
ls -l abc.txts
if [ $? -ne 0 ]
then
        exit 5
fi

######################################################################### FILE HANDLING ####################################################################################
#! /bin/bash
counter=0
while read lines
do
        echo $lines
        counter=$((counter+1))
done < filename
echo "number of lines in file is: $counter"


#! /bin/bash

cat filename | while read lines
do
        echo $lines
done


#! /bin/bash

while read lines
do
        echo $lines
done < filename


#! /bin/bash
counter=0
#cat file name will be performed on one shell
#while loop will be performed on another shell
#counter vaules increased inside the second loop will be gone once it reaches first loop
cat filename | while read lines
do
        echo $lines
        counter=$((counter+1))
        echo "$counter"
done
echo "number of lines in file is: $counter"

######################################################################### ARRAY ##############################################################################################

[root@mcdappsync01 ~]# find . -name "arra*" -type f -exec cat {} \;
#! /bin/bash
arr_var=("ash" "win" "working" "in" "infosys")
length=${#arr_var[@]}
for((i=0;i<${length};i++));
do
echo "the entry in array is ${arr_var[$i]}";
done
set -x
a=1
if [ $a = 1 ]
then
echo "true"
else
echo "false"
fi


#! /bin/bash
array_var=(ash [2]="win" [1]=2209)
echo ${array_var[0]}
echo ${array_var[1]}
echo ${array_var[2]}


#! /bin/bash

declare -a var
var[1]="ash"
var[2]="win"
var[3]=2
echo ${var[0]}
echo ${var[1]}
echo ${var[2]}


#! /bin/bash
array=$(cat /etc/passwd | awk -F':' '{print $1}')
for i in ${array[@]}
do
echo "the username is MS_$i"
done


#! /bin/bash
arr_var=("ash" "win" 22 09 96)
length=${#arr_var[@]}
echo "the length of array is $length"
for i in ${arr_var[@]}
do
echo $i
done


#! /bin/bash
read -a ip_list
for ip in ${ip_list[@]}
do
`ping -c 2 -w 1 $ip 2>&1 > /dev/null`
if [ $? -eq 0 ]
then
echo "the ip $ip is alive"
else
echo " the ip $ip is not alive"
fi
done

####################################### set password for users by script #####################################################
[root@mcdappsync01 ~]# cat passwdscript.sh
#! /bin/bash
for i in `cat users`;
do
echo $i@123 | passwd $i --stdin;
done
#################################################### here document ###############################################################################

Here document is the concept of using multiple lines commented, it can be used to auatomate the ftp,parted,scp activity
<< namewewish
lines to be commented
namewewish

example:
[root@mcdappsync01 ~]# cat heredoc.sh
#! /bin/bash
echo "this is line 1"
echo "this is line 2"
<< ash
echo "this is line 3"
echo "this is line 4"
echo "this is line 5"
echo "this is line 6"
echo "this is line 7"
echo "this is line 8"
ash
echo "this is line 9"
echo "this is line 10"

###################################################### TRAP SIGNALS ####################################################################################

asr steps
mcdappsync repo and new disk
